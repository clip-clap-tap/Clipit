<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.clipit.clipitback.model.dao.PostDao">
    <resultMap id="postMap" type="Post">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="writerId" column="writer_id"/>
        <result property="writerName" column="writer_name"/>
        <result property="status" column="status"/>
        <result property="viewCount" column="view_count"/>
        <result property="createDate" column="created_at"/>
        <result property="updateDate" column="updated_at"/>
        <result property="visitDate" column="visited_at"/>
        <result property="strength" column="strength"/>
        <collection property="tags" javaType="List" ofType="com.clipit.clipitback.model.dto.Tag"
                    notNullColumn="tag_id">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
        <collection property="videos" javaType="List" ofType="com.clipit.clipitback.model.dto.Video"
                    notNullColumn="video_id">
            <id property="id" column="video_id"/>
            <result property="title" column="video_title"/>
            <result property="url" column="video_url"/>
            <result property="videoLength" column="video_length"/>
            <result property="index" column="video_index"/>
        </collection>
        <collection property="ageRange" javaType="List" ofType="int"
                    notNullColumn="age_range">
            <result property="ageRange" column="age_range"/>
        </collection>
        <collection property="bodyPart" javaType="List" ofType="String"
                    notNullColumn="body_part">
            <result property="bodyPart" column="body_part"/>
        </collection>

    </resultMap>

    <select id="selectAllPosts" resultType="Post">
        SELECT * FROM post
    </select>
    <select id="selectPostById" parameterType="int" resultMap="postMap">
        SELECT post.id, post.title,
        post.description, post.writer_id, post.writer_name,
        post.status, post.created_at, post.view_count, post.updated_at,
        tag.id as tag_id, tag.name as tag_name,
        video.id as video_id, video.title as video_title, video.url as video_url, video_length,
        post_video.index as video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        FROM post
        LEFT JOIN post_tag on post.id = post_tag.post_id
        LEFT JOIN tag on post_tag.tag_id = tag.id
        LEFT JOIN post_video on post.id = post_video.post_id
        LEFT JOIN video on post_video.video_id = video.id
        LEFT JOIN post_age_range on post.id=post_age_range.post_id
        LEFT JOIN post_body_part on post.id=post_body_part.post_id
        LEFT JOIN post_strength on post.id=post_strength.post_id
        WHERE post.id = #{id} and post.status!="disabled"
    </select>

    <select id="selectRecentPosts" parameterType="String" resultMap="postMap">
        SELECT post.id,
        post.title,
        post.description,
        post.writer_id,
        post.writer_name,
        post.status,
        post.created_at,
        post.view_count,
        post.updated_at,
        tag.id as tag_id,
        tag.name as tag_name,
        video.id as video_id,
        video.title as video_title,
        video.url as video_url,
        video_length,
        post_video.index as video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        from (select *
        from post
        WHERE post.status = 'public'
        ORDER BY created_at DESC
        LIMIT 4) as post
        LEFT JOIN post_tag on post.id = post_tag.post_id
        LEFT JOIN tag on post_tag.tag_id = tag.id
        LEFT JOIN post_video on post.id = post_video.post_id
        LEFT JOIN video on post_video.video_id = video.id
        LEFT JOIN post_age_range on post.id = post_age_range.post_id
        LEFT JOIN post_body_part on post.id = post_body_part.post_id
        LEFT JOIN post_strength on post.id = post_strength.post_id
    </select>

    <select id="selectPopularPosts" parameterType="String" resultMap="postMap">
        SELECT post.id,
        post.title,
        post.description,
        post.writer_id,
        post.writer_name,
        post.status,
        post.created_at,
        post.view_count,
        post.updated_at,
        tag.id as tag_id,
        tag.name as tag_name,
        video.id as video_id,
        video.title as video_title,
        video.url as video_url,
        video_length,
        post_video.index as video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        from (select *
        from post
        WHERE post.status = 'public'
        ORDER BY view_count DESC
        LIMIT 4) as post
        LEFT JOIN post_tag on post.id = post_tag.post_id
        LEFT JOIN tag on post_tag.tag_id = tag.id
        LEFT JOIN post_video on post.id = post_video.post_id
        LEFT JOIN video on post_video.video_id = video.id
        LEFT JOIN post_age_range on post.id = post_age_range.post_id
        LEFT JOIN post_body_part on post.id = post_body_part.post_id
        LEFT JOIN post_strength on post.id = post_strength.post_id
    </select>

    <select id="selectPostsByWriterId" parameterType="String" resultMap="postMap">
        SELECT post.id, post.title,
        post.description, post.writer_id, post.writer_name,
        post.status, post.created_at, post.view_count, post.updated_at,
        tag.id as tag_id, tag.name as tag_name,
        video.id as video_id, video.title as video_title, video.url as video_url, video_length,
        post_video.index as video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        FROM post
        LEFT JOIN post_tag on post.id = post_tag.post_id
        LEFT JOIN tag on post_tag.tag_id = tag.id
        LEFT JOIN post_video on post.id = post_video.post_id
        LEFT JOIN video on post_video.video_id = video.id
        LEFT JOIN post_age_range on post.id=post_age_range.post_id
        LEFT JOIN post_body_part on post.id=post_body_part.post_id
        LEFT JOIN post_strength on post.id=post_strength.post_id
        WHERE post.writer_id = #{userId} and post.status!="disabled"

    </select>

    <select id="selectUserRelatedPostsByUserId" parameterType="String" resultMap="postMap">
        SELECT post.id, post.title,
        post.description, post.writer_id, post.writer_name,
        post.status, post.created_at, post.view_count, post.updated_at,
        tag.id as tag_id, tag.name as tag_name,
        video.id as video_id, video.title as video_title, video.url as video_url, video_length,
        post_video.index as video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        from post
        LEFT JOIN post_tag on post.id = post_tag.post_id
        LEFT JOIN tag on post_tag.tag_id = tag.id
        LEFT JOIN post_video on post.id = post_video.post_id
        LEFT JOIN video on post_video.video_id = video.id
        LEFT JOIN post_age_range on post.id=post_age_range.post_id
        LEFT JOIN post_body_part on post.id=post_body_part.post_id
        LEFT JOIN post_strength on post.id=post_strength.post_id
        where post.status!='disabled' and (writer_id = #{id}
        or post.id in (select post_id from favorite_post fp where fp.user_id = #{id} and fp.post_id = post.id));
    </select>

    <select id="selectFavoritePostsByUserId" parameterType="String" resultMap="postMap">
        SELECT post.id, post.title,
        post.description, post.writer_id, post.writer_name,
        post.status, post.created_at, post.view_count, post.updated_at,
        tag.id as tag_id, tag.name as tag_name,
        video.id as video_id, video.title as video_title, video.url as video_url, video_length,
        post_video.index as video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        FROM post
        LEFT JOIN post_tag on post.id = post_tag.post_id
        LEFT JOIN tag on post_tag.tag_id = tag.id
        LEFT JOIN post_video on post.id = post_video.post_id
        LEFT JOIN video on post_video.video_id = video.id
        LEFT JOIN post_age_range on post.id=post_age_range.post_id
        LEFT JOIN post_body_part on post.id=post_body_part.post_id
        LEFT JOIN post_strength on post.id=post_strength.post_id
        WHERE post.id in (SELECT post_id FROM favorite_post WHERE user_id=#{id})
    </select>

    <select id="selectVisitedPostsByUserId" parameterType="String" resultMap="postMap">
        WITH RankedPosts AS (
        SELECT
        post.id AS post_id,
        ROW_NUMBER() OVER (PARTITION BY post.id ORDER BY visited_post.visited_at) AS rn
        FROM visited_post
        LEFT JOIN post ON post.id = visited_post.post_id
        WHERE visited_post.user_id = #{userId}
        )
        , Top5Posts AS (
        SELECT post_id
        FROM RankedPosts
        WHERE rn = 1
        ORDER BY post_id
        LIMIT 5
        )
        SELECT
        post.id, post.title,
        post.description, post.writer_id, post.writer_name,
        post.status, post.created_at, post.view_count, post.updated_at,
        tag.id AS tag_id, tag.name AS tag_name,
        video.id AS video_id, video.title AS video_title, video.url AS video_url, video_length,
        post_video.index AS video_index,
        post_age_range.age_range,
        post_body_part.body_part,
        post_strength.strength
        FROM Top5Posts
        JOIN post ON post.id = Top5Posts.post_id
        LEFT JOIN post_tag ON post.id = post_tag.post_id
        LEFT JOIN tag ON post_tag.tag_id = tag.id
        LEFT JOIN post_video ON post.id = post_video.post_id
        LEFT JOIN video ON post_video.video_id = video.id
        LEFT JOIN post_age_range ON post.id = post_age_range.post_id
        LEFT JOIN post_body_part ON post.id = post_body_part.post_id
        LEFT JOIN post_strength ON post.id = post_strength.post_id
        ORDER BY post.id;
    </select>

<!--    <select id="selectVisitedPostsByUserId" parameterType="String" resultMap="postMap">-->
<!--        SELECT post.id,-->
<!--        post.title,-->
<!--        post.description,-->
<!--        post.writer_id,-->
<!--        post.writer_name,-->
<!--        post.status,-->
<!--        post.created_at,-->
<!--        post.view_count,-->
<!--        post.updated_at,-->
<!--        tag.id as tag_id,-->
<!--        tag.name as tag_name,-->
<!--        video.id as video_id,-->
<!--        video.title as video_title,-->
<!--        video.url as video_url,-->
<!--        video_length,-->
<!--        post_video.index as video_index,-->
<!--        post_age_range.age_range,-->
<!--        post_body_part.body_part,-->
<!--        post_strength.strength-->
<!--        from (select v_post.post_id, v_post.visited_at, post.*-->
<!--        from post,-->
<!--        (select user_id,-->
<!--        post_id,-->
<!--        visited_at,-->
<!--        ROW_NUMBER() over (PARTITION BY vp.post_id order by vp.post_id desc) as RN-->
<!--        from visited_post vp) as v_post-->
<!--        where status != 'disabled'-->
<!--        and post.writer_id != 'user2'-->
<!--        and v_post.user_id = 'user2'-->
<!--        and v_post.post_id = post.id-->
<!--        and RN = 1-->
<!--        order by v_post.visited_at-->
<!--        limit 5) as post-->
<!--        LEFT JOIN post_tag on post.id = post_tag.post_id-->
<!--        LEFT JOIN tag on post_tag.tag_id = tag.id-->
<!--        LEFT JOIN post_video on post.id = post_video.post_id-->
<!--        LEFT JOIN video on post_video.video_id = video.id-->
<!--        LEFT JOIN post_age_range on post.id = post_age_range.post_id-->
<!--        LEFT JOIN post_body_part on post.id = post_body_part.post_id-->
<!--        LEFT JOIN post_strength on post.id = post_strength.post_id;-->
<!--    </select>-->

    <insert id="insertPost" parameterType="Post">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            select IFNULL(max(id), 0) + 1
            FROM post;
        </selectKey>
        INSERT INTO post(title, description, writer_id, writer_name, status)
        VALUES (#{title}, #{description}, #{writerId}, (SELECT username FROM user_info WHERE id = #{writerId}),
        #{status});
        INSERT INTO post_tag
        VALUES
        <foreach collection="tags" item="tag" separator="," close=";">
            (
            #{id},
            (SELECT id FROM tag WHERE name = #{tag.name})
            )
        </foreach>
        INSERT INTO post_video(`post_id`, `video_id`, `index`)
        VALUES
        <foreach collection="videos" item="video" separator="," close=";">
            (#{id}, #{video.id}, #{video.index})
        </foreach>

        INSERT INTO post_age_range(`post_id`, `age_range`)
        VALUES
        <foreach collection="ageRange" item="age" separator="," close=";">
            (#{id}, #{age})
        </foreach>
        INSERT INTO post_body_part(`post_id`, `body_part`)
        VALUES
        <foreach collection="bodyPart" item="bpart" separator="," close=";">
            (#{id}, #{bpart})
        </foreach>
        INSERT INTO post_strength
        VALUES (#{id}, #{strength});

    </insert>

    <update id="updatePost" parameterType="Post">
        UPDATE post SET title = #{title}, description = #{description}, writer_id = #{writerId}, status = #{status}
        WHERE id = #{id}
    </update>
    <update id="updatePostStatus" parameterType="Map">
        UPDATE post SET status = #{status}
        WHERE id = #{id}
    </update>
    <update id="increaseViewCount" parameterType="int">
        UPDATE post
        SET view_count = view_count + 1
        WHERE id = #{id};
    </update>

    <select id="selectIsFavorite" parameterType="Map" resultType="int">
        SELECT post_id FROM favorite_post
        WHERE user_id=#{userId} and post_id=#{postId}
    </select>

    <insert id="insertFavoritePost" parameterType="Map">
        INSERT INTO favorite_post
        VALUES (#{userId}, #{postId})
    </insert>

    <delete id="deleteFavoritePost" parameterType="Map">
        DELETE FROM favorite_post
        WHERE user_id=#{userId} AND post_id=#{postId}
    </delete>

    <insert id="insertVisitedPost" parameterType="Map">
        INSERT INTO visited_post(user_id, post_id)
        VALUES (#{userId}, #{postId})
    </insert>
</mapper>